package edu.grinnell.csc207.soundsofsorting.sorts;

import java.util.List;

import edu.grinnell.csc207.soundsofsorting.sortevents.SortEvent;
import edu.grinnell.csc207.soundsofsorting.sortevents.CompareEvent;
import edu.grinnell.csc207.soundsofsorting.sortevents.CopyEvent;
import edu.grinnell.csc207.soundsofsorting.sortevents.SwapEvent;
import static java.lang.Math.floor;
import java.util.ArrayList;
import java.util.Arrays;

/**
 * A collection of sorting algorithms.
 */
public class Sorts {

    /**
     * Swaps indices <code>i</code> and <code>j</code> of array
     * <code>arr</code>.
     *
     * @param <T> the carrier type of the array
     * @param arr the array to swap
     * @param i the first index to swap
     * @param j the second index to swap
     */
    public static <T> void swap(T[] arr, int i, int j) {
        T tmp = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp;
    }

    /**
     * Sorts the array according to the bubble sort algorithm:
     * <pre>
     * [ unprocessed | i largest elements in order ]
     * </pre>
     *
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<Integer>> bubbleSort(T[] arr) {
        ArrayList<SortEvent<Integer>> lst = new ArrayList<SortEvent<Integer>>();
        for (int i = 0; i < arr.length; i++) {
            for (int j = i; j < arr.length; j++) {
                SortEvent ce = new CompareEvent(j, i);
                lst.add(ce);
                if (arr[j].compareTo(arr[i]) < 0) {
                    SortEvent se = new SwapEvent(j, i);
                    lst.add(se);
                    swap(arr, i, j);
                }
            }
        }
        return lst;
    }

    /**
     * Sorts the array according to the selection sort algorithm:
     * <pre>
     * [ i smallest elements in order | unprocessed ]
     * </pre>
     *
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<Integer>> selectionSort(
            T[] arr) {
        ArrayList<SortEvent<Integer>> lst = new ArrayList<SortEvent<Integer>>();
        for (int i = 0; i < arr.length - 1; i++) {
            int lowestIndex = i;
            for (int j = i; j < arr.length; j++) {
                SortEvent ce = new CompareEvent(j, i);
                lst.add(ce);
                if (arr[j].compareTo(arr[lowestIndex]) < 0) {
                    lowestIndex = j;
                }
            }
            SortEvent se = new SwapEvent(lowestIndex, i);
            lst.add(se);
            swap(arr, i, lowestIndex);
        }
        return lst;
    }

    /**
     * Sorts the array according to the insertion sort algorithm:
     * <pre>
     * [ i elements in order | unprocessed ]
     * </pre>
     *
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<Integer>> insertionSort(
            T[] arr) {
        ArrayList<SortEvent<Integer>> lst = new ArrayList<SortEvent<Integer>>();
        for (int i = 0; i < arr.length - 1; i++) {
            for (int j = i + 1; j > 0 && arr[j].compareTo(arr[j - 1]) < 0; j--) {
                SortEvent ce = new CompareEvent(j, j - 1);
                lst.add(ce);
                SortEvent se = new SwapEvent(j - 1, j);
                lst.add(se);
                swap(arr, j - 1, j);

            }
        }
        return lst;
    }

    /**
     * Sorts the array according to the merge sort algorithm.
     *
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<Integer>> mergeSort(
            T[] arr) {
        ArrayList<SortEvent<Integer>> lst = new ArrayList<SortEvent<Integer>>();
        if (0 < arr.length) {
            int mid = arr.length / 2;

            mergeSortHelper(arr, 0, mid, lst);
            mergeSortHelper(arr, mid, arr.length, lst);

            lst = merge(arr, 0, arr.length, lst);
        }
        return lst;
    }

    public static <T extends Comparable<? super T>> void mergeSortHelper(
            T[] arr, int lo, int hi, ArrayList<SortEvent<Integer>> lst) {
        if (lo < hi - 1) {
            int mid = lo + (hi - lo) / 2;

            mergeSortHelper(arr, lo, mid, lst);
            mergeSortHelper(arr, mid, hi, lst);

            merge(arr, lo, hi, lst);
        }

    }

    public static <T extends Comparable<? super T>> ArrayList<SortEvent<Integer>> merge(
            T[] arr, int lo, int hi, ArrayList<SortEvent<Integer>> lst) {
        int mid = lo + (hi - lo) / 2;

        T[] arr1;
        arr1 = Arrays.copyOfRange(arr, 0, arr.length);

        int j = lo;
        int k = mid;
        int num = lo;

        for (int i = lo; j < mid && k < hi; i++) {
            SortEvent ce1 = new CompareEvent(k, j);
            lst.add(ce1);
            if (arr1[k].compareTo(arr1[j]) <= 0) {
                SortEvent cpye1 = new CopyEvent(arr1[k], i);
                lst.add(cpye1);
                arr[i] = arr1[k];
                k++;
            } else {
                SortEvent cpye2 = new CopyEvent(arr1[j], i);
                lst.add(cpye2);
                arr[i] = arr1[j];
                j++;
            }
            num++;
        }

        SortEvent ce2 = new CompareEvent(k, hi);
        lst.add(ce2);
        if (k >= hi) {
            SortEvent ce3 = new CompareEvent(k, hi);
            lst.add(ce3);
        }
        if (k < hi) {
            for (int l = num; l < hi; l++) {
                SortEvent cpye3 = new CopyEvent(arr1[k], l);
                lst.add(cpye3);
                arr[l] = arr1[k];
                k++;
            }
        } else if (j < mid) {
            for (int m = num; m < hi; m++) {
                SortEvent cpye4 = new CopyEvent(arr1[j], m);
                lst.add(cpye4);
                arr[m] = arr1[j];
                j++;
            }
        }

        return lst;

    }

    /**
     * Sorts the array according to the quick sort algorithm.
     *
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<Integer>> quickSort(T[] arr) {
        ArrayList<SortEvent<Integer>> lst = new ArrayList<SortEvent<Integer>>();
        if (0 < arr.length) {
            lst = quickSortHelper(arr, 0, arr.length - 1, lst);
        }
        return lst;
    }

    public static <T extends Comparable<? super T>> ArrayList<SortEvent<Integer>> quickSortHelper(
            T[] arr, int lo, int hi, ArrayList<SortEvent<Integer>> lst) {
        if (lo < hi) {

            T pivot = arr[hi];
            int i = lo - 1;

            for (int j = lo; j < hi; j++) {
                SortEvent ce = new CompareEvent(j, hi);
                lst.add(ce);
                if (arr[j].compareTo(pivot) <= 0) {
                    i++;

                    SortEvent se1 = new SwapEvent(j, i);
                    lst.add(se1);
                    swap(arr, j, i);
                }
            }
            SortEvent se2 = new SwapEvent(i + 1, hi);
            lst.add(se2);
            swap(arr, (i + 1), hi);

            lst = quickSortHelper(arr, lo, i, lst);
            lst = quickSortHelper(arr, i + 2, hi, lst);

        }
        return lst;
    }

    public static <T extends Comparable<? super T>> List<SortEvent<Integer>> combSort(T[] arr) {
        ArrayList<SortEvent<Integer>> lst = new ArrayList<SortEvent<Integer>>();
        double gap = arr.length;
        double shrinkFactor = 1.3;
        boolean sorted = false;

        while (sorted == false) {

            gap = floor(gap / shrinkFactor);

            if (gap <= 1) {
                gap = 1;
                sorted = true;
            } else if (gap == 9 || gap == 10) {
                gap = 11;
            }
            int i = 0;
            while (i + gap < arr.length) {
                SortEvent ce = new CompareEvent(i + (int) gap, i);
                lst.add(ce);
                if (arr[i + (int) gap].compareTo(arr[i]) < 0) {
                    SortEvent se = new SwapEvent(i, i + (int) gap);
                    lst.add(se);
                    swap(arr, i, i + (int) gap);
                    sorted = false;
                }
                i++;
            }

        }
        return lst;
    }

    public static <T> void eventSort(T[] l, List<SortEvent<T>> events) {
        for (int i = 0; i < events.size(); i++) {
            events.get(i).apply(l);
            for (int j = 0; j < l.length; j++) {
                System.out.print(l[j] + " ");
            }
            System.out.print("\n");
        }
    }

}
